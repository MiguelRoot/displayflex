@function list-to-map($keymap, $tolist) {
    $containerKey: map-keys($keymap);
    $nmap: () !default;
    @for $i from 1 through length($tolist) {
        $cmap: (#{nth($containerKey, $i)}: nth($tolist, $i));
        $nmap: map-merge($nmap, $cmap);
    }
    @return $nmap;
}

$dev: map-get($grids, dev);
$columns: map-get($grids, columns);
$breakpoints: map-get($grids, breakpoints);
$gap: map-get($grids, gap);
$container-gap: map-get($grids, container-gap);
$col-gap: map-get($grids, col-gap);

$container-gap-map: list-to-map($breakpoints, $container-gap);
$col-gap-map: list-to-map($breakpoints, $col-gap);

////varialbes///

// $gap-mp: map-get($gaps, pm);
// $gap-mp-y: map-get($gaps, pm-y);
// $gap-mp-x: map-get($gaps, pm-x);
// $gap-t: map-get($gaps, t);
// $gap-b: map-get($gaps, b);
// $gap-r: map-get($gaps, r);
// $gap-l: map-get($gaps, l);

@function rem($size) {
    $remSize: $size / $rem;
    @return #{$remSize}rem;
}

@function sum($slist, $unit) {
    $sum: 0 !default;
    @each $num in $slist {
        @if (str-index($num + "", $unit)) {
            $sum: $sum + $num;
        }
    }
    @return $sum;
}

@function size-gap($fgap) {
    @if (length($fgap) == 1) {
        @return $fgap;
    } @else if (length($fgap) < length($breakpoints)) {
        $nsgap: $fgap !default;
        @for $i from length($fgap) to length($breakpoints) {
            $nsgap2: append($nsgap, nth($fgap, -1));
            $nsgap: $nsgap2;
        }
        @return $nsgap;
    } @else {
        @return $fgap;
    }
}

@function repeat($count, $value: 1) {
    $return: ();

    @for $i from 1 through $count {
        $return: join($return, $value);
    }

    @return $return;
}

@function count-unit($clist, $cunit) {
    $return: 0;
    @for $i from 1 through length($clist) {
        @if (unit(nth($clist, $i)) == $cunit) {
            $return: $return + 1;
        }
    }
    @return $return;
}

@function map-item-key($itk-map, $itk-index) {
    $keys: map-keys($itk-map);
    $index: nth($keys, $itk-index);
    @return map-get($itk-map, $index);
}

@function strip-unit($number) {
    @if type-of($number) == "number" and not unitless($number) {
        @return $number / ($number * 0 + 1);
    }

    @return $number;
}
