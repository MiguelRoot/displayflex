.container {
  $container-max: map-get($breakpoints, index-to-key(-1));
  margin-right: auto;
  margin-left: auto;
  // overflow-x: hidden;
  max-width: nth($container-max, 1);
  @if length($gap-container) == 1 {
    padding-right: $gap-container;
    padding-left: $gap-container;
  }
}

.col {
  display: block;
  flex: 0 0 auto;
  width: 100%;
}

@each $index, $breakpoint in $breakpoints {
  .#{$index}-show {
    display: none;
  }
}

.row {
  &.shrink > .col {
    flex: 1 1 auto;
    max-width: none;
    width: auto;
  }
}

@if length($gap-col) == 1 {
  .row {
    display: flex;
    flex-wrap: wrap;
    &.gap-x.nogap {
      margin-left: -$gap-col;
      margin-right: -$gap-col;
    }
    &.gap-x {
      & > .col {
        padding-right: $gap-col;
        padding-left: $gap-col;
      }
    }
    &.gap-y {
      & > .col {
        padding-top: $gap-col;
        padding-bottom: $gap-col;
      }
    }
  }
}

@each $name, $mygap in $gap-x {
  @if length($mygap) == 1 {
    .row {
      display: flex;
      flex-wrap: wrap;
      &.gap-x--#{$name}.nogap {
        margin-left: -$gap-col;
        margin-right: -$gap-col;
      }
      &.gap-x--#{$name} {
        & > .col {
          padding-right: $gap-col;
          padding-left: $gap-col;
        }
      }
    }
  }
}

@each $index, $breakpoint in $breakpoints {
  $name: $index;
  $size: nth($breakpoint, 1);

  $counter: 1 !default;

  @include from($name) {
    .container {
      @if $size > 0 {
        max-width: $size;
      }
      @if length($gap-container) >= $counter and length($gap-container) > 1 {
        padding-left: nth($gap-container, $counter);
        padding-right: nth($gap-container, $counter);
      }
    }

    @if length($gap-col) >= $counter and length($gap-col) > 1 {
      .row {
        display: flex;
        flex-wrap: wrap;
        &.gap-x.nogap {
          display: $counter;
          margin-left: -#{nth($gap-col, $counter)};
          margin-right: -#{nth($gap-col, $counter)};
        }
        &.gap-x {
          & > .col {
            padding-right: nth($gap-col, $counter);
            padding-left: nth($gap-col, $counter);
          }
        }
        &.gap-y {
          & > .col {
            padding-top: nth($gap-col, $counter);
            padding-bottom: nth($gap-col, $counter);
          }
        }
      }
    }

    @each $name, $mygap in $gap-x {
      @if length($mygap) >= $counter and length($mygap) > 1 {
        .row {
          display: flex;
          flex-wrap: wrap;
          &.gap-x--#{$name}.nogap {
            margin-left: -#{nth($mygap, $counter)};
            margin-right: -#{nth($mygap, $counter)};
          }
          &.gap-x--#{$name} {
            & > .col {
              padding-right: nth($mygap, $counter);
              padding-left: nth($mygap, $counter);
            }
          }
        }
      }
    }

    $counter: ($counter + 1);

    @for $i from 1 through $grid-columns {
      .#{$name}-#{$i} {
        width: (100% / $grid-columns * $i);
      }
    }

    @for $i from 1 through $grid-col {
      .row {
        &.#{$name}-up-#{$i} {
          & > .col {
            width: (100% / $i);
          }
        }
      }
    }

    .#{$name}-start {
      justify-content: start;
      text-align: left;
    }

    .#{$name}-center {
      justify-content: center;
      text-align: center;
    }

    .#{$name}-end {
      justify-content: flex-end;
      text-align: right;
    }

    .#{$name}-around {
      justify-content: space-around;
    }

    .#{$name}-between {
      justify-content: space-between;
    }

    .#{$name}-top {
      align-items: start;
    }

    .#{$name}-middle {
      align-items: center;
    }

    .#{$name}-bottom {
      align-items: flex-end;
    }

    .#{$name}-auto {
      flex: 0 0 auto;
      max-width: none;
      width: auto;
    }

    .#{$name}-shrink {
      flex: 1 1 auto;
      max-width: none;
      width: auto;
    }

    .#{$name}-first {
      order: -1;
    }

    .#{$name}-last {
      order: 1;
    }

    .#{$name}-reverse {
      flex-direction: row-reverse;
    }

    .#{$name}-hide {
      display: none;
    }

    .#{$name}-show {
      display: block;
    }
  }
}

.container.fluid {
  $container-max: map-get($breakpoints, index-to-key(-1));
  max-width: nth($container-max, 1);
  width: 100%;
}
